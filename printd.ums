// Harnaljia Fenelon (hfenel01)
// Muhammad Ali Khan (mkhan16)
// HW #8 - UMASM 

.section init
    .zero r0
    .temps r6, r7 

// r0 is always zero 
// return address stored in r1 
// memory stack pointer in r2 
// value stack pointer in r3
// nonvolatiles r4 & r5 

.section text
    printing: 
        pop r5 off stack r2 

        // printing  zero 
        if (r5 == 0) goto print0 using r4

        // printing negative numbers 
        if (r5 <s r0) goto negative using r4
        
        // printing positive numbers 
        if (r5 >s r0) goto positive using r4
        
        // printing max negative value 
        r5 := r5 & 2147483648
        if (r5 == 0) goto specialNegative using r4
    
    // Purpose: prints the value 0
    // Input: r5 holds the top value of the stack r2 which must be zero 
    // Return: returns to the newLine function 
    print0: 
        push r5 on stack r2
        output ">>> "
        r5 := r5 + 48
        output r5
        output "\n"
        goto r1
    
    // Purpose: prints the decimal representation of r5 
    // Input: r5 holds the top value of the stack r2 which must be negative 
    // Return: returns to the newLine function 
    negative:
        push r5 on stack r2
        push r1 on stack r2
        output ">>> -"
        r5 := -r5
        goto printNum linking r1
        output "\n"
        r5 := -r5
        pop r1 off stack r2
        goto r1

    // Purpose: prints the decimal representation of r5 
    // Input: r5 holds the top value of the stack r2 which must be positive 
    // Return: returns to the newLine function 
    positive:
        output ">>> "
        push r5 on stack r2
        push r1 on stack r2
        goto printNum linking r1
        output "\n"
        pop r1 off stack r2
        goto r1 

    // Purpose: checks if a number is multiple digits then prints it
    // Input: r5 holds the top value of the stack, r4 is a helper 
                                        // register for the calculation 
    // Return: returns to one of the print cases above 
    printNum:
        push r1 on stack r2 
        r4 := r5 mod 10 
        push r4 on stack r3
        r5 := r5 - r4
        r5 := r5 / 10
        if (r5 == 0) goto printSingle using r4
        goto printNum linking r1
        goto printSingle

    // Purpose: prints each digit of a number 
    // Input: r5 holds the value to be printed
    // Return: returns to printNum
    printSingle:
        pop r5 off stack r3
        r5 := r5 + 48 
        output r5
        r5 := r5 - 48 
        pop r1 off stack r2
        goto r1

    // Purpose: prints the biggest negative number
    // Input: none 
    // Return: returns to the newLine function 
    specialNegative: 
       output "2147483648\n"
       goto r1